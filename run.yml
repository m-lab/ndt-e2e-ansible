---
# vim:ft=ansible:

- name: Configure facts shared by all client worker nodes
  hosts: clients
  tags: facts
  vars:
    hostname: "{{ ansible_hostname | lower }}"
    datetime: "{{ ansible_date_time.iso8601 | regex_replace(':', '') }}"
    shaping_summary: "{{ hostvars['mlabmeddlebox']['shaping_policy'] }}-{{ hostvars['mlabmeddlebox']['throttle_mbps'] }}Mbps"
  tasks:
    - name: create result archive filename
      set_fact:
        archive_file: ndt-results-{{ hostname }}-{{ shaping_summary }}-{{ datetime }}.zip

    - name: create log filename
      set_fact:
        log_file: client_wrapper-{{ hostname }}-{{ shaping_summary }}-{{ datetime }}.log

- name: Configure facts for Windows hosts
  hosts: windows
  tags: facts
  tasks:
    - name: set supported browsers
      set_fact:
        supported_browsers:
          - firefox
          - chrome
          # TODO(mtlynch): Uncomment when Edge automation is fixed.
          # - edge

    - name: set archive output path
      set_fact:
        archive_path: "{{ zipped_results_dir }}\\{{ archive_file }}"

    - name: set log path
      set_fact:
        log_path: "{{ results_log_dir }}\\{{ log_file }}"

- name: Configure facts for Linux and OS X hosts
  hosts:
    - linux
    - osx
  tags: facts
  tasks:
    - name: set archive output path
      set_fact:
        archive_path: "{{ zipped_results_dir }}/{{ archive_file }}"

    - name: set log path
      set_fact:
        log_path: "{{ results_log_dir }}/{{ log_file }}"

- name: Configure facts for Linux hosts
  hosts: linux
  tags: facts
  tasks:
    - name: set supported browsers
      set_fact:
        supported_browsers:
          - firefox
          - chrome

    - name: set environment variables
      set_fact:
        environment_vars:
          PATH: "{{ ansible_env.PATH }}:{{ selenium_drivers_path }}"
          DISPLAY: "{{ virtual_display }}"

- name: Configure facts for OS X hosts
  hosts: osx
  tags: facts
  tasks:
    - name: set supported browsers
      set_fact:
        supported_browsers:
          - firefox
          - chrome
          - safari

    - name: set environment variables
      set_fact:
        environment_vars:
          PATH: "{{ ansible_env.PATH }}:{{ selenium_drivers_path }}"

- name: Configure meddlebox for testing
  hosts: mlabmeddlebox
  become: True
  become_method: sudo
  become_user: root
  tags: throttle
  tasks:
    - name: delete existing meddlebox traffic shaping rules
      shell: tc qdisc del dev {{ item }} root
      register: delete_result
      # "No such file or directory" means there was no existing rule.
      failed_when: "delete_result.rc != 0 and 'No such file or directory' not in delete_result.stderr"
      with_items:
        - em1
        - em2

    - name: configure meddlebox traffic shaping rules
      shell: |
        tc qdisc add dev {{ item }} root handle 1: {{ shaping_policy }} default 1 && \
        tc class add dev {{ item }} parent 1: classid 1:1 {{ shaping_policy }} rate {{ throttle_mbps }}mbit
      with_items:
        - em1
        - em2

# It is currently not possible to use the same play for all hosts:
#  * The shell and command modules are unavailable on Windows.
#  * We can't use the raw module on Linux/OS X and still set the environment
#    variables.
# Until Ansible has support for shell/command modules on Windows, this needs
# to be a separate play.
- name: Run NDT E2E Client Wrapper on Windows
  hosts: windows
  serial: 1
  tasks:
    # We need to use the cmd.exe to process the executable because otherwise
    # PowerShell will create exceptions out of any output to stderr.
    # See: http://chuchuva.com/pavel/2010/03/how-to-redirect-output-of-console-program-to-a-file-in-powershell/
    - name: run html5 client wrapper
      tags: html5
      raw: >
        cmd /c python {{ ndt_e2e_client_dir }}\{{ client_wrapper_path }}
        --verbose
        --client=ndt_js
        --browser={{ item }}
        --server={{ ndt_server_fqdn }}
        --output={{ raw_results_dir }}
        --iterations={{ iterations }} `>`> {{ log_path }} 2`>`&1
      with_items: "{{ supported_browsers }}"

    - name: run banjo wrapper
      tags: banjo
      raw: >
        cmd /c python {{ ndt_e2e_client_dir }}\{{ client_wrapper_path }}
        --verbose
        --client=banjo
        --browser={{ item }}
        --server={{ ndt_server_fqdn }}
        --client_path={{ http_replay_dir }}/{{ http_replay_file }}
        --output={{ raw_results_dir }}
        --iterations={{ iterations }} `>`> {{ log_path }} 2`>`&1
      with_items: "{{ supported_browsers }}"

- name: Run NDT E2E Client Wrapper on Linux and OS X
  hosts:
    - linux
    - osx
  serial: 1
  tasks:
    - name: run html5 client wrapper for Linux
      tags: html5
      environment: "{{ environment_vars }}"
      shell: >
        python {{ ndt_e2e_client_dir }}/{{ client_wrapper_path }}
        --verbose
        --client=ndt_js
        --browser={{ item }}
        --server={{ ndt_server_fqdn }}
        --output={{ raw_results_dir }}
        --iterations={{ iterations }} 2>&1 | tee -a {{ log_path }}
      with_items: "{{ supported_browsers }}"
      when: "'linux' in group_names"

    - name: run html5 client wrapper for OS X
      tags: html5
      environment: "{{ environment_vars }}"
      become: True
      become_method: sudo
      become_user: root
      shell: >
        python {{ ndt_e2e_client_dir }}/{{ client_wrapper_path }}
        --verbose
        --client=ndt_js
        --browser={{ item }}
        --server={{ ndt_server_fqdn }}
        --output={{ raw_results_dir }}
        --iterations={{ iterations }} 2>&1 | tee -a {{ log_path }}
      with_items: "{{ supported_browsers }}"
      when: "'osx' in group_names"

    - name: run banjo wrapper for Linux
      tags: banjo
      environment: "{{ environment_vars }}"
      shell: >
        python {{ ndt_e2e_client_dir }}/{{ client_wrapper_path }}
        --verbose
        --client=banjo
        --browser={{ item }}
        --server={{ ndt_server_fqdn }}
        --client_path={{ http_replay_dir }}/{{ http_replay_file }}
        --output={{ raw_results_dir }}
        --iterations={{ iterations }} 2>&1 | tee -a {{ log_path }}
      with_items: "{{ supported_browsers }}"
      when: "'linux' in group_names"

    - name: run banjo wrapper for OS X
      tags: banjo
      environment: "{{ environment_vars }}"
      become: True
      become_method: sudo
      become_user: root
      shell: >
        python {{ ndt_e2e_client_dir }}/{{ client_wrapper_path }}
        --verbose
        --client=banjo
        --browser={{ item }}
        --server={{ ndt_server_fqdn }}
        --client_path={{ http_replay_dir }}/{{ http_replay_file }}
        --output={{ raw_results_dir }}
        --iterations={{ iterations }} 2>&1 | tee -a {{ log_path }}
      with_items: "{{ supported_browsers }}"
      when: "'osx' in group_names"

- name: Package NDT E2E results on Windows hosts
  hosts: windows
  tags: gather
  tasks:
    - name: zip results and logs
      raw: Compress-Archive -Path {{ item }}\* -Update -DestinationPath {{ archive_path }}
      register: zip_result
      failed_when: "'Error' in zip_result.stderr"
      with_items:
        - "{{ raw_results_dir }}"
        - "{{ results_log_dir }}"

- name: Package NDT E2E results on Linux/OS X hosts
  hosts:
    - linux
    - osx
  tags: gather
  tasks:
    - name: zip results and logs
      shell: cd {{ item }}; find . | zip {{ archive_path }} -@
      with_items:
        - "{{ raw_results_dir }}"
        - "{{ results_log_dir }}"

- name: Fetch NDT E2E results and copy them locally
  hosts: clients
  tags: gather
  tasks:
    - name: get NDT E2E result zip package
      fetch: src={{ archive_path }}
             dest={{ local_archive_dir }}/{{ archive_file }}
             flat=yes
             fail_on_missing=yes

- name: Archive NDT E2E results on Windows hosts
  hosts: windows
  tags: gather
  tasks:
    - name: move all result and log files to an archive folder of already packaged files
      raw: "Move-Item {{ item }}\\* {{ archived_results_dir }} -Force"
      with_items:
        - "{{ raw_results_dir }}"
        - "{{ results_log_dir }}"

- name: Archive NDT E2E results on Linux/OS X hosts
  hosts:
    - linux
    - osx
  tags: gather
  tasks:
    - name: move all result and log files to an archive folder of already packaged files
      shell: mv {{ item }}/* {{ archived_results_dir }}
      with_items:
        - "{{ raw_results_dir }}"
        - "{{ results_log_dir }}"
