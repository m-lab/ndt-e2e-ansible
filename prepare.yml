---
# vim:ft=ansible:

- name: Install NDT client wrapper and all dependencies on Windows client machines
  hosts: windows
  vars:
    # Temporary directory in which we download installers
    temp_dir: "C:\\temp"

    python_installer:
      url: https://www.python.org/ftp/python/2.7.11/python-2.7.11.msi
      dest: "{{ temp_dir }}\\python-2.7.11.msi"

    git_installer:
      url: https://github.com/git-for-windows/git/releases/download/v2.8.1.windows.1/Git-2.8.1-64-bit.exe
      dest: "{{ temp_dir }}\\Git-2.8.1-64-bit.exe"

    # TODO(mtlynch): Figure out how to install a particular version. This always
    # installs latest.
    chrome_installer:
      url: http://dl.google.com/chrome/install/375.126/chrome_installer.exe
      dest: "{{ temp_dir }}\\chrome_installer.exe"

    firefox_installer:
      url: https://download.mozilla.org/?product=firefox-45.0.1-SSL&os=win&lang=en-US
      dest: "{{ temp_dir }}\\Firefox Setup 45.0.1.exe"

    selenium_edge_installer:
      # WebDriver installer for Windows 10 Build 10240
      url: https://download.microsoft.com/download/8/D/0/8D0D08CF-790D-4586-B726-C6469A9ED49C/MicrosoftWebDriver.msi
      dest: "{{ temp_dir }}\\MicrosoftWebDriver.msi"

    selenium_chrome_driver_zip:
      url: http://chromedriver.storage.googleapis.com/2.9/chromedriver_win32.zip
      dest: "{{ temp_dir }}\\chromedriver_win32.zip"

    # Path for selenium extension binaries
    selenium_drivers_path: "C:\\selenium-drivers"
    selenium_chrome_driver: "{{ selenium_drivers_path }}\\chromedriver.exe"

    # WMF 5.0 upgrader for Windows Server 2012 R2
    wmf_installer_win2k12r2:
      url: http://go.microsoft.com/fwlink/?LinkId=717507
      dest: "{{ temp_dir }}\\Win8.1AndW2K12R2-KB3134758-x64.msu"
  tasks:
    - name: create temp directory
      tags: temp_dir
      win_file: "path={{ temp_dir }} state=directory"

    - name: check if Python is installed
      win_stat: path="C:\\Python27\\python.exe"
      tags: python
      register: python_binary

    - name: download Python
      tags: python
      win_get_url:
        proxy_url: "{{ http_proxy }}"
        url: "{{ python_installer.url }}"
        dest: "{{ python_installer.dest }}"
      register: python_download
      when: not python_binary.stat.exists

    - name: install Python
      tags: python
      win_msi: path="{{ python_installer.url }}" wait=true
      register: python_install
      when: python_download.changed

    - name: append Python to Path variable
      tags: python
      script: env_path_append.ps1 -append ";C:\Python27;C:\Python27\Scripts"
      when: python_install.changed

    - name: check if git is installed
      win_stat: path="C:\\Program Files\\Git\\bin\\git.exe"
      tags: git
      register: git_binary

    - name: download git
      tags: git
      win_get_url:
        proxy_url: "{{ http_proxy }}"
        url: "{{ git_installer.url }}"
        dest: "{{ git_installer.dest }}"
      when: not git_binary.stat.exists

    - name: install git
      tags: git
      raw: '& "{{ git_installer.dest }}" /SILENT'
      register: git_install
      when: not git_binary.stat.exists

    - name: append git to Path variable
      tags: git
      script: env_path_append.ps1 -append ";C:\Program Files\Git\bin"
      when: git_install.rc is defined and git_install.rc == 0

    - name: check if Chrome is installed
      win_stat: path="C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe"
      tags: chrome
      register: chrome_binary

    - name: download Chrome
      tags: chrome
      win_get_url:
        proxy_url: "{{ http_proxy }}"
        url: "{{ chrome_installer.url }}"
        dest: "{{ chrome_installer.dest }}"
      register: chromedownload
      when: not chrome_binary.stat.exists

    - name: install Chrome
      tags: chrome
      raw: '& "{{ chrome_installer.dest }}" /silent /install'
      when: chromedownload.changed

    - name: check if Firefox is installed
      win_stat: path="C:\\Program Files (x86)\\Mozilla Firefox\\firefox.exe"
      tags: firefox
      register: firefox_binary

    - name: download Firefox
      tags: firefox
      win_get_url:
        proxy_url: "{{ http_proxy }}"
        url: "{{ firefox_installer.url }}"
        dest: "{{ firefox_installer.dest }}"
      register: firefox_download
      when: not firefox_binary.stat.exists

    - name: install Firefox
      tags: firefox
      raw: '& "{{ firefox_installer.dest }}" -ms'
      when: firefox_download.changed

    - name: download Selenium Edge installer
      tags: selenium-edge
      win_get_url:
        proxy_url: "{{ http_proxy }}"
        url: "{{ selenium_edge_installer.url }}"
        dest: "{{ selenium_edge_installer.dest }}"
      register: selenium_edge_download
      # Edge is only available on Win10
      when: ansible_distribution == "Microsoft Windows NT 10.0.10240.0"

    - name: install Selenium Edge
      tags: selenium-edge
      win_msi: path="{{ selenium_edge_installer.dest }}" wait=true
      when: selenium_edge_download.changed

    - name: download Selenium Chrome driver
      tags: selenium-chrome
      win_get_url:
        proxy_url: "{{ http_proxy }}"
        url: "{{ selenium_chrome_driver_zip.url }}"
        dest: "{{ selenium_chrome_driver_zip.dest }}"
      register: selenium_chrome_download

    - name: install Selenium Chrome driver
      tags: selenium-chrome
      win_unzip:
        src: "{{ selenium_chrome_driver_zip.dest }}"
        dest: "{{ selenium_drivers_path }}"
        creates: "{{ selenium_chrome_driver }}"
      register: selenium_chrome_install
      when: selenium_chrome_download.changed

    - name: append Selenium Chrome driver to PATH variable
      tags: selenium-chrome
      script: env_path_append.ps1 -append ";{{ selenium_drivers_path }}"
      when: selenium_chrome_install.changed

    - name: check if NDT E2E client worker repo exists
      win_stat: path="{{ ndt_e2e_client_dir }}"
      tags: ndt-e2e
      register: ndt_e2e_path_info

    - name: download NDT E2E client worker source
      tags: ndt-e2e
      environment:
        http_proxy: "{{ http_proxy }}"
      raw: "git clone {{ ndt_e2e_client_git }} {{ ndt_e2e_client_dir }}"
      when: not ndt_e2e_path_info.stat.exists

    - name: update NDT E2E client worker source
      tags: ndt-e2e
      environment:
        http_proxy: "{{ http_proxy }}"
      raw: "cd {{ ndt_e2e_client_dir }}; git pull origin master"
      when: ndt_e2e_path_info.stat.exists

    - name: install NDT E2E dependencies
      tags: ndt-e2e
      environment:
        http_proxy: "{{ http_proxy }}"
      raw: pip install -r "{{ ndt_e2e_client_dir }}\\requirements.txt"

    # TODO(mtlynch): Figure out why this works locally but not remotely
    - name: install mitmdump (part of mitmproxy)
      tags: ndt-e2e
      environment:
        http_proxy: "{{ http_proxy }}"
        https_proxy: "{{ http_proxy }}"
      raw: pip install mitmproxy

    - name: create HTTP replay directory
      tags: ndt-e2e
      win_file: "path={{ http_replay_dir }} state=directory"

    - name: copy HTTP replay file
      tags: ndt-e2e
      win_copy: src={{ local_http_replay_dir }}/{{ http_replay_file }} dest={{ http_replay_dir }}

    - name: create NDT E2E test results directories
      tags: ndt-e2e
      win_file: "path={{ item }} state=directory"
      with_items:
        - "{{ raw_results_dir }}"
        - "{{ zipped_results_dir }}"
        - "{{ archived_results_dir }}"
        - "{{ results_log_dir }}"

    # TODO(mtlynch): Make idempotent
    - name: download WMF5
      tags: wmf
      win_get_url:
        proxy_url: "{{ http_proxy }}"
        url: "{{ wmf_installer_win2k12r2.url }}"
        dest: "{{ wmf_installer_win2k12r2.dest }}"
      register: wmf_download
      # Win10 already has WMF 5.0 installed
      when: ansible_distribution != "Microsoft Windows NT 10.0.10240.0"

    # Note: This seems to take 10-15 mins to take effect.
    - name: install WMF5
      tags: wmf
      raw: '& "{{ wmf_installer_win2k12r2.dest }}" /quiet'
      when: wmf_download.changed

- name: Install NDT client wrapper and all dependencies on Linux client machines
  hosts: linux
  vars:
    selenium_chrome_driver_url: http://chromedriver.storage.googleapis.com/2.21/chromedriver_linux64.zip

    selenium_chrome_driver: "{{ selenium_drivers_path }}/chromedriver"
  become: True
  become_method: sudo
  become_user: root
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ http_proxy }}"
  tasks:
    - name: add Chrome key to apt-key
      tags: chrome
      apt_key: url=https://dl-ssl.google.com/linux/linux_signing_key.pub

    - name: add Chrome repo
      tags: chrome
      apt_repository: repo="deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main"
                      state=present

    - name: install apt packages
      apt: name={{ item }} state=present update_cache=yes
      with_items:
        - firefox
        - git
        - google-chrome-stable
        - python
        - python-pip
        - unzip
        - xvfb
        - zip
        # Required for mitmproxy
        - python-dev
        - libffi-dev
        - libssl-dev
        - libxml2-dev
        - libxslt1-dev
        - libjpeg8-dev
        - zlib1g-dev

    - name: install xvfb init.d daemon script
      tags: xvfb
      template: src=xvfb-init.d-template dest=/etc/init.d/xvfb mode=0755

    - name: start xvfb service
      tags: xvfb
      service: name=xvfb state=started

    - name: create Selenium driver directory
      tags: selenium-chrome
      file: path={{ selenium_drivers_path }} state=directory

    - name: install Selenium Chrome driver
      tags: selenium-chrome
      unarchive: src={{ selenium_chrome_driver_url }}
                 dest={{ selenium_drivers_path }}
                 owner={{ ansible_user }}
                 copy=no
      register: selenium_chrome_install

    - name: create NDT E2E client worker source directory
      tags: ndt-e2e
      file: path={{ ndt_e2e_client_dir }}
            state=directory
            owner={{ ansible_user }}

    - name: download NDT E2E client worker source
      tags: ndt-e2e
      become_user: "{{ ansible_user }}"
      git: repo={{ ndt_e2e_client_git }}
           dest={{ ndt_e2e_client_dir }}
           update=yes

    - name: Install ndt e2e requirements
      tags: ndt-e2e
      pip: requirements={{ ndt_e2e_client_dir }}/requirements.txt

    - name: Install mitmproxy
      tags: ndt-e2e
      pip: name=mitmproxy

    - name: create HTTP replay directory
      tags: ndt-e2e
      file: path={{ http_replay_dir }}
            state=directory
            owner={{ ansible_user }}

    - name: copy HTTP replay file
      tags: ndt-e2e
      copy: src={{ local_http_replay_dir }}/{{ http_replay_file }}
            dest={{ http_replay_dir }}
            owner={{ ansible_user }}

    - name: create NDT E2E test results directories
      tags: ndt-e2e
      file: path={{ item }} state=directory owner={{ ansible_user }}
      with_items:
        - "{{ raw_results_dir }}"
        - "{{ zipped_results_dir }}"
        - "{{ archived_results_dir }}"
        - "{{ results_log_dir }}"

- name: Install NDT client wrapper and all dependencies on OS X client machines
  hosts: osx
  vars:
    # Temporary directory in which we download packages.
    temp_dir: /tmp

    selenium_chrome_driver_url: http://chromedriver.storage.googleapis.com/2.21/chromedriver_mac32.zip
    selenium_chrome_download_path: "{{ temp_dir }}/chromedriver_mac32.zip"

    selenium_safari_driver_url: http://selenium-release.storage.googleapis.com/2.48/SafariDriver.safariextz
    selenium_safari_download_path: "{{ temp_dir }}/SafariDriver.safariextz"

    # Named mavericks, but works on El Capitan.
    # TODO(mtlynch): Verify this package works on Mountain Lion.
    git_installer_version: git-2.8.1-intel-universal-mavericks
    git_installer_url: http://ufpr.dl.sourceforge.net/project/git-osx-installer/{{ git_installer_version }}.dmg
    git_installer_download_path: "{{ temp_dir }}/{{ git_installer_version }}.dmg"
    git_installer_image_name: /Volumes/Git 2.8.1 Mavericks Intel Universal

    mitmproxy_version: 0.17.1
    mitmproxy_url: https://github.com/mitmproxy/mitmproxy/releases/download/v{{ mitmproxy_version }}/mitmproxy-{{ mitmproxy_version }}-osx.tar.gz
    mitmproxy_download_path: "{{ temp_dir }}/mitmproxy-{{ mitmproxy_version }}.tar.gz"
  become: True
  become_method: sudo
  become_user: root
  environment:
    http_proxy: "{{ http_proxy }}"
    https_proxy: "{{ http_proxy }}"
  tasks:
    # TODO(mtlynch): Add tasks to install Chrome.
    # TODO(mtlynch): Add tasks to install Firefox.

    - name: create Selenium driver directory
      tags: selenium-chrome
      file: path={{ selenium_drivers_path }} state=directory owner={{ ansible_user }}

    - name: download Selenium Chrome driver
      become_user: "{{ ansible_user }}"
      tags: selenium-chrome
      get_url: url={{ selenium_chrome_driver_url }}
               dest={{ selenium_chrome_download_path }}
      register: download_selenium_chrome

    # TODO(mtlynch): Switch to unarchive module once issue #15754 is fixed:
    # https://github.com/ansible/ansible/issues/15754
    - name: unarchive Selenium Chrome driver
      become_user: "{{ ansible_user }}"
      tags: selenium-chrome
      shell: unzip {{ selenium_chrome_download_path }} -o -d {{ selenium_drivers_path }}
      when: download_selenium_chrome.changed

    - name: download Selenium Safari driver
      become_user: "{{ ansible_user }}"
      tags: selenium-safari
      get_url: url={{ selenium_safari_driver_url }}
               dest={{ selenium_safari_download_path }}

    # TODO(mtlynch): Automate installation of Selenium Safari driver. This may
    # not be possible: http://stackoverflow.com/q/9981307/3653712

    - name: download Git installer for OS X
      become_user: "{{ ansible_user }}"
      get_url: url={{ git_installer_url }}
               dest={{ git_installer_download_path }}

    - name: mount installer dmg file
      shell: hdiutil attach {{ git_installer_download_path }}

    - name: install git
      shell: installer -package "{{ git_installer_image_name }}/{{ git_installer_version }}.pkg" -target /

    - name: unmount Git installer dmg file
      shell: hdiutil detach "{{ git_installer_image_name }}/"

    - name: download mitmproxy
      become_user: "{{ ansible_user }}"
      tags: mitmproxy
      get_url: url={{ mitmproxy_url }} dest={{ mitmproxy_download_path }}
      register: mitmproxy_download

    - name: create mitmproxy directory
      tags: mitmproxy
      file: path={{ mitmproxy_install_dir }}
            state=directory
            owner={{ ansible_user }}

    # TODO(mtlynch): Switch to unarchive module once issue #15754 is fixed:
    # https://github.com/ansible/ansible/issues/15754
    - name: unarchive mitmproxy
      become_user: "{{ ansible_user }}"
      tags: mitmproxy
      shell: tar -xvzf {{ mitmproxy_download_path }} -C {{ mitmproxy_install_dir }}
      when: mitmproxy_download.changed

    - name: install pip
      tags: pip
      shell: easy_install pip

    - name: create NDT E2E client worker source directory
      tags: ndt-e2e
      file: path={{ ndt_e2e_client_dir }}
            state=directory
            owner={{ ansible_user }}

    - name: download NDT E2E client worker source
      tags: ndt-e2e
      git: repo={{ ndt_e2e_client_git }}
           dest={{ ndt_e2e_client_dir }}
           update=yes
      become_user: "{{ ansible_user }}"

    - name: Install ndt e2e requirements
      become_user: "{{ ansible_user }}"
      tags: ndt-e2e
      pip: requirements={{ ndt_e2e_client_dir }}/requirements.txt
           executable=/usr/local/bin/pip
           extra_args="--user {{ ansible_user }}"

    - name: create HTTP replay directory
      tags: ndt-e2e
      file: path={{ http_replay_dir }}
            state=directory
            owner={{ ansible_user }}

    - name: copy HTTP replay file
      tags: ndt-e2e
      become_user: "{{ ansible_user }}"
      copy: src={{ local_http_replay_dir }}/{{ http_replay_file }}
            dest={{ http_replay_dir }}

    - name: create NDT E2E test results directories
      tags: ndt-e2e
      file: path={{ item }} state=directory owner={{ ansible_user }}
      with_items:
        - "{{ raw_results_dir }}"
        - "{{ zipped_results_dir }}"
        - "{{ archived_results_dir }}"
        - "{{ results_log_dir }}"
